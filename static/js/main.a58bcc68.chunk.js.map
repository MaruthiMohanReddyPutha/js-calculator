{"version":3,"sources":["components/Display.js","components/ButtonPanel.js","components/App.js","serviceWorker.js","index.js"],"names":["Display","props","state","currentVal","currentExpression","className","this","id","React","Component","ButtonPanel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2TAGqBA,G,wDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,WAAY,IACZC,kBAAmB,IAJR,E,qDASf,OACI,yBAAKC,UAAU,eAEX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,WAAWC,KAAKJ,MAAME,mBACrC,yBAAKG,GAAG,UAAUF,UAAU,UAAUC,KAAKJ,MAAMC,kB,GAfhCK,IAAMC,YCAtBC,G,wDACjB,WAAYT,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,GAFE,E,qDAQf,OACI,yBAAKG,UAAU,gBACX,4BAAQE,GAAG,QAAQF,UAAU,oBAA7B,MACA,4BAAQA,UAAU,gBAAlB,KACA,4BAAQA,UAAU,gBAAlB,OACA,4BAAQE,GAAG,SAASF,UAAU,mBAA9B,KAIA,4BAAQE,GAAG,MAAMF,UAAU,iBAA3B,KACA,4BAAQE,GAAG,MAAMF,UAAU,iBAA3B,KACA,4BAAQE,GAAG,QAAQF,UAAU,iBAA7B,KACA,4BAAQE,GAAG,WAAWF,UAAU,mBAAhC,KAIA,4BAAQE,GAAG,OAAOF,UAAU,iBAA5B,KACA,4BAAQE,GAAG,OAAOF,UAAU,iBAA5B,KACA,4BAAQE,GAAG,MAAMF,UAAU,iBAA3B,KACA,4BAAQE,GAAG,WAAWF,UAAU,mBAAhC,KAIA,4BAAQE,GAAG,QAAQF,UAAU,iBAA7B,KACA,4BAAQE,GAAG,QAAQF,UAAU,iBAA7B,KACA,4BAAQE,GAAG,OAAOF,UAAU,iBAA5B,KACA,4BAAQE,GAAG,MAAMF,UAAU,mBAA3B,KAIA,4BAAQE,GAAG,OAAOF,UAAU,sBAA5B,KACA,4BAAQE,GAAG,UAAUF,UAAU,uBAA/B,KACA,4BAAQE,GAAG,SAASF,UAAU,mBAA9B,U,GAzCyBG,IAAMC,YCahCE,MAXf,WACE,OACE,yBAAKN,UAAU,OACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,MACA,kBAAC,EAAD,SCEQO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a58bcc68.chunk.js","sourcesContent":["import React from 'react';\nimport './Display.scss';\n\nexport default class Display extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentVal: '0',\n            currentExpression: ''\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"display-box\">\n                {/* <div className=\"header\">CALCULATOR</div> */}\n                <div className=\"display-content\">\n                    <div className=\"formula\">{this.state.currentExpression}</div>\n                    <div id=\"display\" className=\"result\">{this.state.currentVal}</div>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './ButtonPanel.scss';\n\nexport default class ButtonPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            \n        };\n    }\n\n    render() {\n        return (\n            <div className=\"button-panel\">\n                <button id=\"clear\" className=\"button clear-all\">AC</button>\n                <button className=\"button clear\">%</button>\n                <button className=\"button clear\">+/-</button>\n                <button id=\"divide\" className=\"button operator\">\n                    /\n                </button>\n\n                <button id=\"one\" className=\"button number\">1</button>\n                <button id=\"two\" className=\"button number\">2</button>\n                <button id=\"three\" className=\"button number\">3</button>\n                <button id=\"multiply\" className=\"button operator\">\n                    x\n                </button>\n\n                <button id=\"four\" className=\"button number\">4</button>\n                <button id=\"five\" className=\"button number\">5</button>\n                <button id=\"six\" className=\"button number\">6</button>\n                <button id=\"subtract\" className=\"button operator\">\n                    -\n                </button>\n\n                <button id=\"seven\" className=\"button number\">7</button>\n                <button id=\"eight\" className=\"button number\">8</button>\n                <button id=\"nine\" className=\"button number\">9</button>\n                <button id=\"add\" className=\"button operator\">\n                    +\n                </button>\n\n                <button id=\"zero\" className=\"button zero number\">0</button>\n                <button id=\"decimal\" className=\"button operator dot\">.</button>\n                <button id=\"equals\" className=\"button operator\">\n                    =\n                </button>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './App.scss';\nimport Display from './Display';\nimport ButtonPanel from './ButtonPanel';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div className=\"calculator\">\n            <Display />\n            <ButtonPanel />\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}