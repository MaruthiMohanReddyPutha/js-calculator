{"version":3,"sources":["components/Display.js","components/ButtonPanel.js","components/App.js","serviceWorker.js","index.js"],"names":["Display","props","state","currentVal","currentExpression","className","this","id","displayValue","React","Component","ButtonPanel","value","onClick","handleClear","handleOperator","handleNumber","handleDecimal","handleEquals","isValidDecimal","isNumber","App","formula","formulaArray","evaluated","handleNumbers","bind","handleOperators","handleExpression","e","currentNumber","target","currentValue","test","setState","formulaArr","currVal","push","join","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ca5335de.chunk.js","sourcesContent":["import React from 'react';\nimport './Display.scss';\n\nexport default class Display extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentVal: '0',\n            currentExpression: ''\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"display-box\">\n                {/* <div className=\"header\">CALCULATOR</div> */}\n                <div className=\"display-content\">\n                    <div className=\"formula\">{this.props.currentExpression}</div>\n                    <div id=\"display\" className=\"result\">{this.props.displayValue}</div>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './ButtonPanel.scss';\n\nexport default class ButtonPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            \n        };\n    }\n\n    render() {\n        return (\n            <div className=\"button-panel\">\n                <button id=\"clear\" value=\"clear\" className=\"button clear-all\" onClick={this.props.handleClear}>AC</button>\n                <button className=\"button clear\">%</button>\n                <button className=\"button clear\">+/-</button>\n                <button id=\"divide\" value=\"/\" className=\"button operator\" onClick={this.props.handleOperator}>\n                    /\n                </button>\n\n                <button id=\"one\" value=\"1\" className=\"button number\" onClick={this.props.handleNumber}>1</button>\n                <button id=\"two\" value=\"2\" className=\"button number\" onClick={this.props.handleNumber}>2</button>\n                <button id=\"three\" value=\"3\" className=\"button number\" onClick={this.props.handleNumber}>3</button>\n                <button id=\"multiply\" value=\"x\" className=\"button operator\" onClick={this.props.handleOperator}>\n                    x\n                </button>\n\n                <button id=\"four\" value=\"4\" className=\"button number\" onClick={this.props.handleNumber}>4</button>\n                <button id=\"five\" value=\"5\" className=\"button number\" onClick={this.props.handleNumber}>5</button>\n                <button id=\"six\" value=\"6\" className=\"button number\" onClick={this.props.handleNumber}>6</button>\n                <button id=\"subtract\" value=\"-\" className=\"button operator\" onClick={this.props.handleOperator}>\n                    -\n                </button>\n\n                <button id=\"seven\" value=\"7\" className=\"button number\" onClick={this.props.handleNumber}>7</button>\n                <button id=\"eight\" value=\"8\" className=\"button number\" onClick={this.props.handleNumber}>8</button>\n                <button id=\"nine\" value=\"9\" className=\"button number\" onClick={this.props.handleNumber}>9</button>\n                <button id=\"add\" value=\"+\" className=\"button operator\" onClick={this.props.handleOperator}>\n                    +\n                </button>\n\n                <button id=\"zero\" value=\"0\" className=\"button zero number\" onClick={this.props.handleNumber}>0</button>\n                <button id=\"decimal\" value=\".\" className=\"button operator dot\" onClick={this.props.handleDecimal}>.</button>\n                <button id=\"equals\" value=\"=\" className=\"button operator\" onClick={this.props.handleEquals}>\n                    =\n                </button>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './App.scss';\nimport Display from './Display';\nimport ButtonPanel from './ButtonPanel';\n\n// Regular Expressions\nconst isValidDecimal = /[0-9]+.{1}[0-9]+/;\nconst isEndsWithOperator = /[+-/*]$/;\nconst isEndsWithOperatorWithMinus = /[+-/*]-$/;\nconst isOperator = /[+-/*]/;\nconst isNumber = /[0-9]+/;\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentVal: '0',\n            formula: '',\n            formulaArray: [],\n            evaluated: false\n        };\n        // Handle the handler functions\n        this.handleNumbers = this.handleNumbers.bind(this);\n        this.handleOperators = this.handleOperators.bind(this);\n        this.handleClear = this.handleClear.bind(this);\n        this.handleDecimal = this.handleDecimal.bind(this);\n        this.handleEquals = this.handleEquals.bind(this);\n        this.handleExpression = this.handleExpression.bind(this);\n    }\n\n    handleNumbers(e) {\n        const currentNumber = e.target.value;\n        // Add the number to the array\n        const currentValue = this.state.currentVal;\n        // Check if the current value is number\n        if(isNumber.test(currentValue) || isValidDecimal(currentValue)) {\n            this.handleExpression(currentNumber);\n        }\n    }\n\n    handleOperators(e) {\n\n    }\n\n    handleClear(e) {\n        // Clear all the values\n        this.setState({\n            currentVal: '0',\n            formula: '',\n            formulaArray: [],\n            evaluated: false\n        })\n    }\n\n    handleEquals(e) {\n\n    }\n\n    handleDecimal(e) {\n\n    }\n\n    handleExpression(currentValue) {\n        const formulaArr = this.state.formulaArray;\n        const currVal = this.state.currentVal;\n        formulaArr.push(currentValue);\n        // Set state\n        this.setState({\n            formulaArray: formulaArr,\n            formula: formulaArr.join(''),\n            currentVal: currVal + currentValue,\n        });\n    }\n    \n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"calculator\">\n                    <Display currentExpression={this.state.formula} displayValue={this.state.currentVal}/>\n                    <ButtonPanel \n                        handleNumber={this.handleNumbers}\n                        handleOperator={this.handleOperators}\n                        handleDecimal={this.handleDecimal}\n                        handleClear={this.handleClear}\n                        handleEquals={this.handleEquals}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}