{"version":3,"sources":["components/App.js","components/Display.js","components/ButtonPanel.js","serviceWorker.js","index.js"],"names":["isValidDecimal","isEndsWithOperator","isEndsWithOperatorWithMinus","isOperator","isNumber","App","props","state","currentValue","currentExpression","evaluated","handleNumbers","bind","handleOperators","handleClear","handleDecimal","handleEquals","e","currentNumber","target","value","currentVal","this","expr","setState","test","enteredOperator","currVal","newExpr","slice","console","log","indexOf","result","eval","className","displayValue","handleNumber","handleOperator","React","Component","Display","id","ButtonPanel","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2dd0361e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\nimport Display from './Display';\nimport ButtonPanel from './ButtonPanel';\n\n// Regular Expressions\nconst isValidDecimal = /[0-9]+.{1}[0-9]+/;\nconst isEndsWithOperator = /[*/+-]$/;\nconst isEndsWithOperatorWithMinus = /[*/+-]-$/;\nconst isOperator = /[*/+-]/;\nconst isNumber = /[0-9]+/;\n// NOTE: A VERY CURIOUS CONCEPT\n// When the group of Operators are in the order /[+-/*]/ it matches a dot(.) too,\n// and when the order of Operators is changed to /[*/+-]/ it does not match a dot(.)\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentValue: '0',\n            currentExpression: '',\n            evaluated: false\n        };\n        // Handle the handler functions\n        this.handleNumbers = this.handleNumbers.bind(this);\n        this.handleOperators = this.handleOperators.bind(this);\n        this.handleClear = this.handleClear.bind(this);\n        this.handleDecimal = this.handleDecimal.bind(this);\n        this.handleEquals = this.handleEquals.bind(this);\n    }\n\n    handleNumbers(e) {\n        const currentNumber = e.target.value;\n        // Add the number to the array\n        const currentVal = this.state.currentValue;\n        const expr = this.state.currentExpression;\n        // Initial state of calculator\n        if((expr === '' && currentVal === '0')) {\n            this.setState({\n                currentExpression: expr + currentNumber,\n                currentValue: currentNumber\n            });\n        } else if(this.state.evaluated) {\n            // If it has been evaluated already\n            // then start the application as a whole with the entered value\n            this.setState({\n                currentValue: currentNumber,\n                currentExpression: currentNumber,\n                evaluated: false\n            });\n        } else if(isNumber.test(currentVal) || isValidDecimal.test(currentVal)) {\n            // Doesn't allow the number to start with more than one zero\n            if((currentVal === '0' && currentNumber !== '0')) {\n                // Replace the zeroes and start entering the numbers\n                this.setState({\n                    currentExpression: currentNumber,\n                    currentValue: currentNumber,\n                });\n            } else if(currentVal !== '0') {\n                this.setState({\n                    currentExpression: expr + currentNumber,\n                    currentValue: currentVal + currentNumber,\n                });\n            }\n        } else if(isOperator.test(currentVal)) {\n            this.setState({\n                currentValue: currentNumber,\n                currentExpression: expr + currentNumber\n            });\n        }\n    }\n\n    handleOperators(e) {\n        // Handle +, -, *, /\n        const enteredOperator = e.target.value;\n        // Initial state do not\n        const expr = this.state.currentExpression;\n        const currVal = this.state.currentValue;\n        if(!(expr === '')) {\n            // if an operator was entered, check if it is the same\n            // if it is the same, do not do anything\n            // if it is not then replace the current value\n            if(this.state.evaluated) {\n                this.setState({\n                    currentValue: enteredOperator,\n                    currentExpression: currVal + enteredOperator,\n                    evaluated: false\n                });\n            } else if(isEndsWithOperatorWithMinus.test(expr)) {\n                let newExpr = expr.slice(0, -2);\n                this.setState({\n                    currentValue: enteredOperator,\n                    currentExpression: newExpr + enteredOperator\n                });\n            } else if(isEndsWithOperator.test(expr)) {\n                if(enteredOperator === '-') {\n                    if(currVal !== enteredOperator) {\n                        this.setState({\n                            currentValue: enteredOperator,\n                            currentExpression: expr + enteredOperator\n                        });\n                    }\n                } else {\n                    if(currVal !== enteredOperator) {\n                        let newExpr = expr.slice(0, -1);\n                        this.setState({\n                            currentValue: enteredOperator,\n                            currentExpression : newExpr + enteredOperator\n                        });\n                    }\n                }\n            } else {\n                // In none of the above cases,\n                // Just add the operator to the current expression\n                this.setState({\n                    currentValue: enteredOperator,\n                    currentExpression: expr + enteredOperator\n                });\n            }\n        }\n    }\n\n    handleDecimal(e) {\n        // Handle the Decimal value entry in the calculator\n        // Points to note\n            // Decimal might be entered right after equals\n            // Decimal might be entered when the current value is zero and expr is zero\n            // Decimal might be entered when the current value is zero and expr is empty\n            // Decimal entered after an Operator\n        const currVal = this.state.currentValue;\n        const expr = this.state.currentExpression;\n        if(this.state.evaluated) {\n            console.log('this.state.evaluated');\n            let newVal = '0.'\n            this.setState({\n                currentValue: newVal,\n                currentExpression: newVal,\n                evaluated: false\n            });\n        } else if(expr === '') {\n            console.log('expr === \"\"');\n            let newVal = '0.';\n            this.setState({\n                currentValue: newVal,\n                currentExpression: newVal,\n            })\n        } else if(isOperator.test(currVal)) {\n            console.log('isOperator');\n            let newVal = '0.';\n            this.setState({\n                currentValue: newVal,\n                currentExpression: expr + newVal\n            });\n        } else if(currVal.indexOf('.') < 0){\n            console.log('currVal.indexOf(.) < 0');\n            this.setState({\n                currentValue: currVal + '.',\n                currentExpression: expr + '.'\n            });\n        }\n    }\n\n    handleClear(e) {\n        // Clear all the values\n        this.setState({\n            currentValue: '0',\n            currentExpression: '',\n            evaluated: false\n        })\n    }\n\n    handleEquals(e) {\n        //////// Evaluate the expression ///////////\n        // Things to take care of:\n        //  1. Expression might end with an operator\n        //  2. Expression might end with an operator and a minus sign\n        //  3. Equals might be pressed with an empty expression\n        const expr = this.state.currentExpression;\n        const currVal = this.state.currentValue;\n        if(expr !== '' && !this.state.evaluated) {\n            if(isEndsWithOperatorWithMinus.test(expr)) {\n                let newExpr = expr.slice(0, -2);\n                let result = eval(newExpr);\n                this.setState({\n                    currentValue: result,\n                    currentExpression: `${newExpr}=${result}`,\n                    evaluated: true\n                });\n            } else if(isEndsWithOperator.test(expr)) {\n                let newExpr = expr.slice(0, -1);\n                let result = eval(newExpr);\n                this.setState({\n                    currentValue: result,\n                    currentExpression: `${newExpr}=${result}`,\n                    evaluated: true\n                })\n            } else {\n                let result = eval(expr);\n                this.setState({\n                    currentValue: result,\n                    currentExpression: `${expr}=${result}`,\n                    evaluated: true\n                });\n            }\n        }\n    }\n    \n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"calculator\">\n                    <Display currentExpression={this.state.currentExpression} displayValue={this.state.currentValue}/>\n                    <ButtonPanel \n                        handleNumber={this.handleNumbers}\n                        handleOperator={this.handleOperators}\n                        handleDecimal={this.handleDecimal}\n                        handleClear={this.handleClear}\n                        handleEquals={this.handleEquals}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport './Display.scss';\n\nexport default class Display extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentVal: '0',\n            currentExpression: ''\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"display-box\">\n                {/* <div className=\"header\">CALCULATOR</div> */}\n                <div className=\"display-content\">\n                    <div className=\"formula\">{this.props.currentExpression}</div>\n                    <div id=\"display\" className=\"result\">{this.props.displayValue}</div>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './ButtonPanel.scss';\n\nexport default class ButtonPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            \n        };\n    }\n\n    render() {\n        return (\n            <div className=\"button-panel\">\n                <button id=\"clear\" value=\"clear\" className=\"button clear-all\" onClick={this.props.handleClear}>AC</button>\n                <button className=\"button clear\">%</button>\n                <button className=\"button clear\">+/-</button>\n                <button id=\"divide\" value=\"/\" className=\"button operator\" onClick={this.props.handleOperator}>\n                    /\n                </button>\n\n                <button id=\"one\" value=\"1\" className=\"button number\" onClick={this.props.handleNumber}>1</button>\n                <button id=\"two\" value=\"2\" className=\"button number\" onClick={this.props.handleNumber}>2</button>\n                <button id=\"three\" value=\"3\" className=\"button number\" onClick={this.props.handleNumber}>3</button>\n                <button id=\"multiply\" value=\"*\" className=\"button operator\" onClick={this.props.handleOperator}>\n                    x\n                </button>\n\n                <button id=\"four\" value=\"4\" className=\"button number\" onClick={this.props.handleNumber}>4</button>\n                <button id=\"five\" value=\"5\" className=\"button number\" onClick={this.props.handleNumber}>5</button>\n                <button id=\"six\" value=\"6\" className=\"button number\" onClick={this.props.handleNumber}>6</button>\n                <button id=\"subtract\" value=\"-\" className=\"button operator\" onClick={this.props.handleOperator}>\n                    -\n                </button>\n\n                <button id=\"seven\" value=\"7\" className=\"button number\" onClick={this.props.handleNumber}>7</button>\n                <button id=\"eight\" value=\"8\" className=\"button number\" onClick={this.props.handleNumber}>8</button>\n                <button id=\"nine\" value=\"9\" className=\"button number\" onClick={this.props.handleNumber}>9</button>\n                <button id=\"add\" value=\"+\" className=\"button operator\" onClick={this.props.handleOperator}>\n                    +\n                </button>\n\n                <button id=\"zero\" value=\"0\" className=\"button zero number\" onClick={this.props.handleNumber}>0</button>\n                <button id=\"decimal\" value=\".\" className=\"button operator dot\" onClick={this.props.handleDecimal}>.</button>\n                <button id=\"equals\" value=\"=\" className=\"button operator\" onClick={this.props.handleEquals}>\n                    =\n                </button>\n            </div>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}